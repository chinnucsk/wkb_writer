%% Copyright 2012 Cloudant
-module(wkb_test).

-include_lib("eunit/include/eunit.hrl").

geom_2d_test() ->
	% POINT
	Pt = "{\"type\":\"Point\", \"coordinates\": [100.0, 0.0]}",
	{ok, WKB1} = wkb_writer:geojson_to_wkb(Pt),
	?assertEqual("000000000140590000000000000000000000000000", 
		bin_to_hexstr(WKB1)),

	% LINESTRING
	L = "{\"type\": \"LineString\", \"coordinates\": [[100.0, 0.0],
			[101.0, 1.0]]}",
	{ok, WKB2} = wkb_writer:geojson_to_wkb(L),
	?assertEqual("0000000002000000024059000000000000000000000000000040594000000000003FF0000000000000",
		bin_to_hexstr(WKB2)),

	% POLYGON - No holes
	P1 = "{\"type\":\"Polygon\", \"coordinates\": [ [ [100.0, 0.0], 
			[101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ]}",
	{ok, WKB3} = wkb_writer:geojson_to_wkb(P1),
	?assertEqual("00000000030000000100000005405900000000000000000000000000004059400000000000000000000000000040594000000000003FF000000000000040590000000000003FF000000000000040590000000000000000000000000000",
		bin_to_hexstr(WKB3)),

	% POLYGON - holes
	P2 = "{\"type\":\"Polygon\",\"coordinates\": [ [ [100.0, 0.0], 
			[101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
			 [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], 
			 [100.2, 0.2] ] ] }",
	{ok, WKB4} = wkb_writer:geojson_to_wkb(P2),
	?assertEqual("00000000030000000200000005405900000000000000000000000000004059400000000000000000000000000040594000000000003FF000000000000040590000000000003FF0000000000000405900000000000000000000000000000000000540590CCCCCCCCCCD3FC999999999999A40593333333333333FC999999999999A40593333333333333FE999999999999A40590CCCCCCCCCCD3FE999999999999A40590CCCCCCCCCCD3FC999999999999A",
		bin_to_hexstr(WKB4)),

	% MULTIPOINT
	MP = "{\"type\":\"MultiPoint\",\"coordinates\":
			 [ [100.0, 0.0], [101.0, 1.0] ] }",
	{ok, WKB5} = wkb_writer:geojson_to_wkb(MP),
	?assertEqual("000000000400000002000000000140590000000000000000000000000000000000000140594000000000003FF0000000000000",
		bin_to_hexstr(WKB5)),

	% MULTILINESTRING
	MLS = "{\"type\":\"MultiLineString\",\"coordinates\": [ [ [100.0, 0.0],
			 [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }",
	{ok, WKB6} = wkb_writer:geojson_to_wkb(MLS),
	?assertEqual("0000000005000000020000000002000000024059000000000000000000000000000040594000000000003FF0000000000000000000000200000002405980000000000040000000000000004059C000000000004008000000000000",
		bin_to_hexstr(WKB6)),

	 % MULTIPOLYGON
	MP1 = "{\"type\": \"MultiPolygon\",\"coordinates\": [
		[[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], 
		[102.0, 3.0], [102.0, 2.0]]],
		[[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], 
		[100.0, 1.0], [100.0, 0.0]],
		[[100.2, 0.2], [100.8, 0.2], [100.8, 0.8],
		 [100.2, 0.8], [100.2, 0.2]]]]}",
	{ok, WKB7} = wkb_writer:geojson_to_wkb(MP1),
	?assertEqual
		bin_to_hexstr(WKB7)),

	% GEOMETRYCOLLECTION
	GC = "{\"type\": \"GeometryCollection\", \"geometries\": 
			[ { \"type\": \"Point\",
			\"coordinates\": [100.0, 0.0]
		},
		{\"type\": \"LineString\",
			\"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ] } ]}",
	{ok, WKB8} = wkb_writer:geojson_to_wkb(GC),
	?assertEqual("0000000007000000020000000001405900000000000000000000000000000000000002000000024059400000000000000000000000000040598000000000003FF0000000000000", 
		bin_to_hexstr(WKB8)).

% extended wkb
geom_3d_test() ->
	Pt = "{\"type\":\"Point\", \"coordinates\": [100.0, 0.0, 1]}",
	{ok, WKB1} = wkb_writer:geojson_to_wkb(Pt),
	?assertEqual("0000000001405900000000000000000000000000003FF0000000000000",
		 bin_to_hexstr(WKB1)).

% priv
bin_to_hexstr(Bin) ->
	lists:flatten([io_lib:format("~2.16.0B", [X]) ||
	X <- binary_to_list(Bin)]).